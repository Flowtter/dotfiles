snippet imp
import ${1} ${2:as ${3}}
endsnippet

snippet from
from ${1} import ${2}
endsnippet

snippet cwd
os.path.join(os.getcwd(), os.path.dirname(__file__))
endsnippet

snippet func
def ${1:my_func}(${2:self, }${3:index: int}) ${4:-> ${5:int}}:
    $0
    return 0
endsnippet

snippet for
for ${1:i} in range(${2}):
    $0
endsnippet

snippet fore
for ${1:item} in $1s:
    $0
endsnippet

snippet while
while(${1:True}):
    $0
endsnippet

snippet ofor
[${1} for ${2:i} in ${3:range(${4})}${5:$2s}]$0
endsnippet

snippet re
return $0
endsnippet

snippet try
try:
    $1
except ${2:Exception as ${3:e}}:
    ${4:print($3)}
endsnippet

snippet if
if $1:
    $0
endsnippet

snippet elif
elif $1:
    $0
endsnippet

snippet else
else:
    $0
endsnippet

snippet pr
print(${1:f}"${2}")
endsnippet

snippet logtest
if ${1}:
    print("--- [\033[31mKO\033[m]", ${2}, "---")
    ${3:failed += 1}
else:
    print("--- [\033[32mOK\033[m]", $2, "---")
endsnippet
#############
global !p
def get_args(line: str):
  args = []
  for arg in map(lambda x: x.lstrip(), line.split(',')):
    temp = arg.split(':')
    attr, anno = (temp[0], temp[1].lstrip()) if len(temp) > 1 else (temp[0], None)
    args.append((attr, anno))
  return args
endglobal

snippet cl "class ..." b
class $1:
    """$2`!p
if "\n" in t[2]:
  snip >> 1
  snip += '"""'
else:
  snip.rv = '"""'`

    def __init__(self, $3):`!p
snip >> 2
for arg in get_args(t[3]):
  snip += f"self.{arg[0]} = {arg[0]}"`
  $0
endsnippet
